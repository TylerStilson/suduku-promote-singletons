#include <stdio.h>
#include <inttypes.h>
#include <string.h>

extern uint64_t promote_pencil_singletons(uint16_t *, uint8_t *);
extern void make_pencil_table(uint8_t *);
extern uint64_t callfunction(uint16_t *, uint8_t *);
extern uint64_t (*target_function)(uint16_t *, uint8_t *);
extern uint64_t unsaved_register_number;

// F is a full pencil marking, i.e.,
// all 9 values are marked as possible, i.e.,
// binary 1000001111111110
#define F 0x83fe

// E is an empty pencil marking, i.e.,
// all 9 values are marked as impossible, i.e.,
// binary 1000000000000000
#define E 0x8000

#suite alltests

#tcase test_nop
#test test_nop
    // test promote_pencil_singletons on a board where nothing changes
    uint8_t table[9*9*3];
    make_pencil_table(table);

    uint16_t input1[] = {
             3,      8,      1,      4,      7,      6,      9,      5,      2,
             7,      2,      5,      8,      9,      3,      1,      6,      4,
             9,      6,      4,      2,      5,      1,      3,      8,      7,
             5,      9,      6,      1,      2,      8,      4,      7,      3,
             2,      4,      3,      9,      6,      7,      8,      1,      5,
             8,      1,      7,      3,      4,      5,      2,      9,      6,
             1,      7,      8,      6,      3,      4,      5,      2,      9,
             4,      5,      9,      7,      8,      2,      6,      3,      1,
             6,      3,      2,      5,      1,      9,      7,      4,      8,
    };

    uint16_t expected1[] = {
             3,      8,      1,      4,      7,      6,      9,      5,      2,
             7,      2,      5,      8,      9,      3,      1,      6,      4,
             9,      6,      4,      2,      5,      1,      3,      8,      7,
             5,      9,      6,      1,      2,      8,      4,      7,      3,
             2,      4,      3,      9,      6,      7,      8,      1,      5,
             8,      1,      7,      3,      4,      5,      2,      9,      6,
             1,      7,      8,      6,      3,      4,      5,      2,      9,
             4,      5,      9,      7,      8,      2,      6,      3,      1,
             6,      3,      2,      5,      1,      9,      7,      4,      8,
    };

    // a fully-solved board should not change
    uint64_t changed = callfunction(input1, table);
    ck_assert_int_eq(unsaved_register_number, 0);
    ck_assert_int_eq(changed, 0);
    ck_assert_int_eq(memcmp(input1, expected1, 162), 0);

    uint16_t input2[] = {
             8, 0x8090, 0x8054, 0x80c4,      5, 0x8044,      3, 0x8244,      1,
        0x808e, 0x808a, 0x806e, 0x81ce,      9, 0x8146,      4, 0x8164, 0x8120,
        0x800e,      9, 0x806e,      4, 0x804a, 0x8146,      7, 0x8164, 0x8120,
             5,      2, 0x810a, 0x81c2, 0x80c2, 0x8142, 0x8142,      4,      9,
        0x8212,      6, 0x8312, 0x8382, 0x8092,      3, 0x8122, 0x81a2,      2,
        0x821a, 0x811a,      7, 0x8346, 0x8052, 0x8376, 0x8162, 0x816a, 0x8128,
             6, 0x809a, 0x821e, 0x820a,      8, 0x8212, 0x8226, 0x82ae, 0x80b8,
        0x821e, 0x811a, 0x831e,      5, 0x801a,      7, 0x8306, 0x830e,      6,
        0x829a,      5, 0x831a, 0x824a,      2, 0x8252, 0x8302, 0x838a, 0x8198,
    };

    uint16_t expected2[] = {
             8, 0x8090, 0x8054, 0x80c4,      5, 0x8044,      3, 0x8244,      1,
        0x808e, 0x808a, 0x806e, 0x81ce,      9, 0x8146,      4, 0x8164, 0x8120,
        0x800e,      9, 0x806e,      4, 0x804a, 0x8146,      7, 0x8164, 0x8120,
             5,      2, 0x810a, 0x81c2, 0x80c2, 0x8142, 0x8142,      4,      9,
        0x8212,      6, 0x8312, 0x8382, 0x8092,      3, 0x8122, 0x81a2,      2,
        0x821a, 0x811a,      7, 0x8346, 0x8052, 0x8376, 0x8162, 0x816a, 0x8128,
             6, 0x809a, 0x821e, 0x820a,      8, 0x8212, 0x8226, 0x82ae, 0x80b8,
        0x821e, 0x811a, 0x831e,      5, 0x801a,      7, 0x8306, 0x830e,      6,
        0x829a,      5, 0x831a, 0x824a,      2, 0x8252, 0x8302, 0x838a, 0x8198,
    };

    changed = callfunction(input2, table);
    ck_assert_int_eq(unsaved_register_number, 0);
    ck_assert_int_eq(changed, 0);
    ck_assert_int_eq(memcmp(input2, expected2, 162), 0);

#tcase test_no_cascade
#test test_no_cascade
    // test promote_pencil_singletons on a board where some squares change
    // but there are no cascading changes
    uint8_t table[9*9*3];
    make_pencil_table(table);

    uint16_t input[] = {
        0x8360, 0x8300, 0x8060,      3, 0x8302, 0x8332, 0x8006,      7, 0x8016,
        0x8308,      2,      7, 0x8112, 0x8302,      6, 0x800a,      5, 0x8012,
             1, 0x8008,      4, 0x8020, 0x8080,      2,      8,      6,      9,
        0x800c,      5,      9,      7, 0x800a, 0x800a,      4,      8, 0x8046,
        0x8084,      6,      8, 0x8006,      4, 0x8202, 0x82a6,      3, 0x8086,
        0x809c, 0x8098,      1,      6,      5, 0x8308, 0x8284, 0x8204, 0x8084,
        0x8330, 0x8310,      3, 0x8132,      2,      7,      6, 0x8210, 0x8110,
        0x81f4, 0x8190, 0x8064,      9, 0x8140, 0x8130, 0x8084,      1,      3,
        0x83d4,      1, 0x8044, 0x8110, 0x8148, 0x8118, 0x8284, 0x8214,      5,
    };

    uint16_t expected[] = {
        0x8360, 0x8300, 0x8060,      3, 0x8302, 0x8312, 0x8006,      7, 0x8016,
        0x8300,      2,      7, 0x8112, 0x8302,      6, 0x800a,      5, 0x8012,
             1,      3,      4,      5,      7,      2,      8,      6,      9,
        0x800c,      5,      9,      7, 0x800a, 0x800a,      4,      8, 0x8046,
        0x8084,      6,      8, 0x8006,      4, 0x8202, 0x82a6,      3, 0x8086,
        0x809c, 0x8090,      1,      6,      5, 0x8308, 0x8284, 0x8204, 0x8084,
        0x8330, 0x8310,      3, 0x8112,      2,      7,      6, 0x8210, 0x8110,
        0x81f4, 0x8190, 0x8064,      9, 0x8140, 0x8130, 0x8084,      1,      3,
        0x83d4,      1, 0x8044, 0x8110, 0x8148, 0x8118, 0x8284, 0x8214,      5,
    };

    uint64_t changed = callfunction(input, table);
    ck_assert_int_eq(unsaved_register_number, 0);
    ck_assert_int_eq(changed, 1);
    ck_assert_int_eq(memcmp(input, expected, 162), 0);

#tcase test_with_cascade
#test test_with_cascade
    // test promote_pencil_singletons on a board where some squares change
    // and the promotions lead to more promotions
    uint8_t table[9*9*3];
    make_pencil_table(table);

    uint16_t input[] = {
             2, 0x8142, 0x8140,      7,      4, 0x8022, 0x8300,      3, 0x8320,
             7, 0x8102,      9,      2, 0x800a, 0x802a,      6, 0x8030, 0x8130,
             5,      4,      3, 0x8240, 0x8240,      8,      7,      1,      2,
        0x8048, 0x80e0,      2, 0x802a,      8,      4, 0x8008,      9, 0x80c8,
             8, 0x8280,      1, 0x8208, 0x8288,      6,      5,      2, 0x8098,
        0x8248, 0x82e0,      4, 0x8228, 0x828c, 0x80a8,      1, 0x8040, 0x81c8,
        0x8252,      2, 0x81c0, 0x815a, 0x80ca, 0x808a, 0x8208, 0x8060, 0x826a,
        0x8242, 0x82c2,      5, 0x804a, 0x80ca,      2,      4,      8, 0x824a,
        0x8052,      3, 0x8140, 0x8152,      5,      9, 0x8004,      7, 0x8042,
    };

    uint16_t expected[] = {
             2,      1,      6,      7,      4,      5,      8,      3,      9,
             7,      8,      9,      2, 0x800a, 0x800a,      6,      4,      5,
             5,      4,      3, 0x8240, 0x8240,      8,      7,      1,      2,
             6,      5,      2,      1,      8,      4,      3,      9,      7,
             8, 0x8280,      1, 0x8208, 0x8288,      6,      5,      2,      4,
        0x8208, 0x8280,      4, 0x8228, 0x828c, 0x8088,      1,      6,      8,
        0x8012,      2,      7, 0x8158, 0x804a, 0x800a,      9,      5, 0x804a,
        0x8202, 0x8240,      5, 0x8048, 0x80ca,      2,      4,      8, 0x804a,
        0x8012,      3,      8, 0x8050,      5,      9,      2,      7, 0x8042,
    };

    uint64_t changed = callfunction(input, table);
    ck_assert_int_eq(unsaved_register_number, 0);
    ck_assert_int_eq(changed, 1);
    ck_assert_int_eq(memcmp(input, expected, 162), 0);

#tcase test_with_solve
#test test_with_solve
    // test promote_pencil_singletons on a board where the board
    // ends up fully solved
    uint8_t table[9*9*3];
    make_pencil_table(table);

    uint16_t input1[] = {
        0x818c, 0x81b0,      9, 0x815c, 0x8074,      1, 0x80a8, 0x81e8, 0x81a0,
        0x810c, 0x8130, 0x8014, 0x815c,      7, 0x8178, 0x8028, 0x816a,      9,
        0x8188,      1,      6, 0x8108, 0x8220, 0x8328, 0x80a8,      4,      2,
        0x8382, 0x8190, 0x8090,      5,      3, 0x8310, 0x8084, 0x8086,      6,
        0x8380,      2, 0x8080, 0x81c0,      1, 0x8340,      4, 0x80a8, 0x80a0,
             6,      3,      5, 0x8094, 0x8014, 0x8010,      8,      9, 0x8082,
             5, 0x80c0,      3,      9, 0x8040,      2,      1, 0x8180,      4,
        0x8004, 0x8040,      8,      1, 0x8070,      7,      9, 0x8024,      3,
             4,      9,      1, 0x8008,      8, 0x8028,      6, 0x80a4, 0x80a0,
    };

    uint16_t expected1[] = {
             3,      4,      9,      2,      5,      1,      7,      6,      8,
             8,      5,      2,      4,      7,      6,      3,      1,      9,
             7,      1,      6,      8,      9,      3,      5,      4,      2,
             1,      8,      4,      5,      3,      9,      2,      7,      6,
             9,      2,      7,      6,      1,      8,      4,      3,      5,
             6,      3,      5,      7,      2,      4,      8,      9,      1,
             5,      7,      3,      9,      6,      2,      1,      8,      4,
             2,      6,      8,      1,      4,      7,      9,      5,      3,
             4,      9,      1,      3,      8,      5,      6,      2,      7,
    };

    uint64_t changed = callfunction(input1, table);
    ck_assert_int_eq(unsaved_register_number, 0);
    ck_assert_int_eq(changed, 1);
    ck_assert_int_eq(memcmp(input1, expected1, 162), 0);

    uint16_t input2[] = {
             3,      9,      8, 0x80a0,      6, 0x8080,      1,      2, 0x80b0,
        0x8094, 0x8092, 0x8016, 0x83a6, 0x83a0, 0x8382,      6,      3, 0x80b0,
        0x8084,      5,      6, 0x828e, 0x8288,      4, 0x8280, 0x8280,      8,
        0x8030,      2,      9, 0x819a, 0x8198, 0x818a, 0x81b8,      6, 0x80ba,
             6, 0x8012,      7, 0x811a, 0x8118,      2, 0x8138, 0x8020,      9,
             8, 0x8012,      3,      6, 0x8290,      5, 0x8094, 0x8080, 0x8092,
             1,      8, 0x8024, 0x82a8, 0x82a8, 0x8288, 0x82a8,      4,      6,
        0x82b0, 0x8098, 0x8030, 0x82b8,      1,      6, 0x82a8,      8,      2,
        0x82b0,      6, 0x8030, 0x83b8,      2, 0x8388, 0x82a8,      1, 0x80a8,
    };

    uint16_t expected2[] = {
             3,      9,      8,      5,      6,      7,      1,      2,      4,
             4,      7,      1,      2,      8,      9,      6,      3,      5,
             2,      5,      6,      1,      3,      4,      7,      9,      8,
             5,      2,      9,      8,      7,      1,      4,      6,      3,
             6,      1,      7,      3,      4,      2,      8,      5,      9,
             8,      4,      3,      6,      9,      5,      2,      7,      1,
             1,      8,      2,      7,      5,      3,      9,      4,      6,
             7,      3,      4,      9,      1,      6,      5,      8,      2,
             9,      6,      5,      4,      2,      8,      3,      1,      7,
    };

    changed = callfunction(input2, table);
    ck_assert_int_eq(unsaved_register_number, 0);
    ck_assert_int_eq(changed, 1);
    ck_assert_int_eq(memcmp(input2, expected2, 162), 0);

#main-pre
    srunner_set_xml(sr, "test_detail.xml");
    target_function = promote_pencil_singletons;
